package ch.capi.events{	import flash.events.ErrorEvent;		
	/**	 * Represents an error event that will be used when a file couldn't be started.	 * 	 * @author		Cedric Tabin - thecaptain	 * @version		1.0	 */	public class LoadStartErrorEvent extends ErrorEvent	{		//---------//		//Constants//		//---------//				/**		 * Defines the 'startFailed' error event.		 */		public static const START_FAILED:String = "startFailed";				//---------//		//Variables//		//---------//		private var _linkedError:Object;				//-----------------//		//Getters & Setters//		//-----------------//				/**		 * Defines the linked error object. This can be an <code>Error</code> object,		 * an <code>Event</code> or simply <code>null</code>.		 */		public function get linkedError():Object { return _linkedError; }				//-----------//		//Constructor//		//-----------//				/**		 * Creates a new <code>LoadStartErrorEvent</code> object.		 * 		 * @param	type		The event type.		 * @param	message		The error message.		 * @param	linkedError	The linked error object.		 */		public function LoadStartErrorEvent(type:String, message:String, linkedError:Object=null):void		{			super(type, false, false, message);						_linkedError = linkedError;		}				//--------------//		//Public methods//		//--------------//		/**		 * Returns a <code>String</code> displaying this object.		 * 		 * @return	A <code>String</code> displaying this object.		 */		public override function toString():String		{			return "LoadStartErrorEvent : "+super.text+" [linkedError="+linkedError+"]";		}		//-----------------//		//Protected methods//		//-----------------//				//---------------//		//Private methods//		//---------------//	}}