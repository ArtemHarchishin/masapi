package ch.capi.events{	import flash.events.Event;			/**	 * Represents event dispatched by the <code>GlobalEventDispatcher</code>.	 * 	 * @see			ch.capi.events.GlobalEventDispatcher	GlobalEventdispatcher	 * @author		Cedric Tabin - thecaptain	 * @version		1.0	 */	public class GlobalEvent extends Event	{		//---------//		//Constants//		//---------//				/**		 * Defines the events that will be dispatched before the		 * dispatching of the specified event.		 */		public static const GLOBAL_BEFORE:String = "globalBefore";				/**		 * Defines the events that will be dispatched after the		 * dispatching of the specified event.		 */		public static const GLOBAL_AFTER:String = "globalAfter";				//---------//		//Variables//		//---------//		private var _event:Event;				//-----------------//		//Getters & Setters//		//-----------------//				/**		 * Defines the <code>Event</code> dispatched.		 */		public function get event():Event { return _event; }				//-----------//		//Constructor//		//-----------//				/**		 * Creates a new <code>GlobalEvent</code> object.		 * 		 * @param	type		The type of the event.		 * @param	event		The source event.		 */		public function GlobalEvent(type:String, event:Event):void		{			super(type);						_event = event;		}				//--------------//		//Public methods//		//--------------//		/**		 * Creates a copy of the <code>GlobalEvent</code> object and sets the value of each property to match that of the original.		 * 		 * @return	The cloned <code>Event</code>.		 */		public override function clone():Event		{			return new GlobalEvent(type, _event);		}		//-----------------//		//Protected methods//		//-----------------//				//---------------//		//Private methods//		//---------------//	}}