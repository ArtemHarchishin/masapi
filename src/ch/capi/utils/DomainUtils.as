package ch.capi.utils{	import flash.system.SecurityDomain;		import flash.system.ApplicationDomain;		
	/**	 * Represents DomainUtils.	 * 	 * @author		Cedric Tabin - thecaptain	 * @version		1.0	 */	public class DomainUtils	{		//---------//		//Constants//		//---------//				/**		 * No <code>ApplicationDomain</code> will be created.		 */		public static const APPDOMAIN_NONE:String = "none";				/**		 * A new independant <code>ApplicationDomain</code> will be created.		 */		public static const APPDOMAIN_CREATE:String = "create";				/**		 * A new <code>ApplicationDomain</code> will be created as child as the current		 * <code>ApplicationDomain</code>.		 */		public static const APPDOMAIN_CHILD:String = "child";				/**		 * The current <code>ApplicationDomain</code> will be used.		 */		public static const APPDOMAIN_CURRENT:String = "current";				/**		 * The current <code>SecurityDomain</code> will be used.		 */		public static const SECDOMAIN_CURRENT:String = "current";				/**		 * No <code>SecurityDomain</code> will be used.		 */		public static const SECDOMAIN_NONE:String = "none";				//---------//		//Variables//		//---------//				//-----------------//		//Getters & Setters//		//-----------------//				//-----------//		//Constructor//		//-----------//				//--------------//		//Public methods//		//--------------//		/**		 * Retrieves a new <code>ApplicationDomain</code> depending of the specified <code>appDomainCreationPolicy</code>.		 * 		 * @param	appDomainCreationPolicy		The <code>ApplicationDomain</code> creation policy, issued from the constants. Allowed		 * 										values are <code>APPDOMAIN_NONE</code>, <code>APPDOMAIN_CREATE</code>, <code>APPDOMAIN_CHILD</code>		 * 										or <code>APPDOMAIN_CURRENT</code>.		 * @return	The create <code>ApplicationDomain</code> or <code>null</code>.		 * @throws	Error	If the appDomainCreationPolicy is invalid.		 * @see		#appDomainCreationPolicy	appDomainCreationPolicy		 */		public static function getApplicationDomain(appDomainCreationPolicy:String):ApplicationDomain		{			if (appDomainCreationPolicy == APPDOMAIN_NONE) return null;			if (appDomainCreationPolicy == APPDOMAIN_CREATE) return new ApplicationDomain();			if (appDomainCreationPolicy == APPDOMAIN_CHILD) return new ApplicationDomain(ApplicationDomain.currentDomain);			if (appDomainCreationPolicy == APPDOMAIN_CURRENT) return ApplicationDomain.currentDomain;						throw new Error("The appDomainCreationPolicy '"+appDomainCreationPolicy+"' is not valid");		}				/**		 * Retrieves the <code>SecurityDomain</code> depending of the specified <code>secDomainPolicy</code>.		 * 		 * @param	secDomainPolicy		The <code>SecurityDomain</code> issued from the constants. Allowed values are		 * 								<code>SECDOMAIN_CURRENT</code> or <code>SECDOMAIN_NONE</code>.		 * @return	The <code>SecurityDomain</code> or <code>null</code>.		 * @throws	Error	If the secDomainPolicy is invalid.		 * @see		#secDomainPolicy	secDomainPolicy		 */		public static function getSecurityDomain(secDomainPolicy:String):SecurityDomain		{			if(secDomainPolicy == SECDOMAIN_CURRENT) return SecurityDomain.currentDomain;			if(secDomainPolicy == SECDOMAIN_NONE) return null;						throw new Error("The secDomainPolicy '"+secDomainPolicy+"' is not valid");		}		//-----------------//		//Protected methods//		//-----------------//				//---------------//		//Private methods//		//---------------//	}}