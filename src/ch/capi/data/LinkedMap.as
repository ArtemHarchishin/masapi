package ch.capi.data{	/**	 * Represents a <code>IMap</code> that stores the order of the keys added to it.	 * 	 * @author 	Cedric Tabin - thecaptain	 * @version	1.0	 */	public class LinkedMap extends DictionnaryMap	{		//---------//		//Constants//		//---------//				//---------//		//Variables//		//---------//		private var _listKeys:IList		= new ArrayList();		private var _listValues:IList	= new ArrayList();		//-----------------//		//Getters & Setters//		//-----------------//				//-----------//		//Constructor//		//-----------//				/**		 * Creates a new <code>LinkedMap</code> object.		 */		public function LinkedMap():void 		{			super(true); 		}				//--------------//		//Public methods//		//--------------//				/**		 * Associates the specified value with the specified key in the <code>IMap</code>.		 * 		 * @param	key		The key.		 * @param	value	The value.		 * @return	The previous value mapped to the key or <code>null</code>.		 */		public override function put(key:*, value:*):*		{			var old:* = super.put(key, value);						removeKeyAndValue(key);			_listKeys.addElement(key);			_listValues.addElement(value);						return old;		}				/**		 * Removes the mapping for a key from the <code>IMap</code> if it is present.		 * 		 * @param	key		The key to remove.		 * @return	The mapped value for this key.		 */		public override function remove(key:*):*		{			var old:* = super.remove(key);			removeKeyAndValue(key);			return old;		}				/**		 * Retrieves all the values contained into the <code>IMap</code> in the order of 		 * they have been added.		 * 		 * @return	An <code>Array</code> containing all the values.		 */		public override function values():Array		{			return _listValues.toArray();		}		/**		 * Retrieves all the keys contained into the <code>IMap</code> in the order of they		 * have been added.		 * 		 * @return	An <code>Array</code> containing all the keys.		 */		public override function keys():Array		{			return _listKeys.toArray();		}		//-----------------//		//Protected methods//		//-----------------//						//---------------//		//Private methods//		//---------------//				private function removeKeyAndValue(key:*):void		{			var i:int = _listKeys.getElementIndex(key);			if (i == -1) return;						_listKeys.removeElementAt(i);			_listValues.removeElementAt(i);		}	}}