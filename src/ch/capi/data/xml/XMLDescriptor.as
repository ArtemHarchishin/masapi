package ch.capi.data.xml{	import ch.capi.utils.ParseUtils;	
	
	import flash.xml.XMLNodeType;		import flash.xml.XMLDocument;		import flash.xml.XMLNode;		
	/**	 * Represents an abstract XML descriptor. A <code>XMLDescriptor</code> is based on a <code>XMLNode</code> that is used	 * to retrieve all the attributes and subnodes.	 * 	 * @example	 * <listing version="3.0">	 * var xml:XML = &lt;node name="myNode"&gt;textNode&lt;/node&gt;	 * var desc:XMLDescriptor = new XMLDescriptor(xml);	 * trace(desc.getText()); //textNode	 * trace(desc.getAttribute("name")); //myNode	 * trace(desc.toXMLString());	 * </listing>	 * 	 * @author 	Cedric Tabin - thecaptain	 * @version	1.0	 */	public class XMLDescriptor	{		//---------//		//Constants//		//---------//				//---------//		//Variables//		//---------//		private var _xmlNode:XMLNode;
		//-----------------//		//Getters & Setters//		//-----------------//				/**		 * Defines the source <code>XMLNode</code>.		 */		protected function get node():XMLNode { return _xmlNode; }				//-----------//		//Constructor//		//-----------//				/**		 * Creates a new <code>XMLDescriptor</code> object.		 * 		 * @param	source	The source object.		 * @see		#parseSource()	parseSource()		 */		public function XMLDescriptor(source:Object):void 		{			_xmlNode = parseSource(source);		}				//--------------//		//Public methods//		//--------------//				/**		 * Creates a new <code>XMLDescriptor</code> object with the specified node name.		 * 		 * @param	name	The node name.		 * @return	The created <code>XMLDescriptor</code>.		 */		public static function create(name:String):XMLDescriptor		{			var node:String = "<"+name+" />";			return new XMLDescriptor(node);		}		/**		 * Retrieves the <code>XMLDescriptor</code> node name.		 * 		 * @return	The node name.		 */		public function getName():String { return _xmlNode.nodeName; }				/**		 * Set the specified name to the <code>XMLDescriptor</code>.		 * 		 * @param	name	The name.		 */		public function setName(name:String):void { _xmlNode.nodeName = name; }				/**		 * Retrieves all the first level sub-nodes of the current <code>XMLDescriptor</code>. Be aware that the <code>XMLNode</code> returned		 * are direct references to the <code>XMLNode</code>.		 * 		 * @param	name	The name of the nodes to retrieve.		 * @return	An <code>Array</code> with all the nodes that matches the specified <code>name</code>. If the <code>name</code>		 * 			is <code>null</code>, then all the nodes are returned.		 */		public function getChildren(name:String=null):Array		{			var childNodes:Array = new Array();			for each(var node:XMLNode in _xmlNode.childNodes)			{				if (name == null || node.nodeName == name) 				{					childNodes.push(node);				}			}						return childNodes;		}				/**		 * Retrieves the first <code>XMLNode</code> that matches the specified name. If the name is not		 * specified, then the method will return the first child. Be aware that the <code>XMLNode</code> returned is a		 * direct reference.		 * 		 * @param	name	The node name.		 * @return	The element of <code>null</code> if no node with the specified name has been found.		 */		public function getChild(name:String=null):XMLNode		{			if (name == null) return _xmlNode.firstChild;						for each(var node:XMLNode in _xmlNode.childNodes)			{				if (node.nodeName == name)				{					return node;				}			}						return null;		}		/**		 * Retrieves all the attributes name contained into the <code>XMLDescriptor</code>.		 * 		 * @return	An <code>Array</code> containing the name of the attributes.		 */		public function getAttributes():Array		{			var attributes:Array = new Array();			for (var attribute:String in _xmlNode.attributes)			{				attributes.push(attribute);			}						return attributes;		}		/**		 * Retrieves the specified attribute.		 * 		 * @param	name			The attribute name.		 * @param	defaultValue	The default value if the attribute doesn't exist.		 * @return	The attribute value or the <code>defaultValue</code> if the attribute doesn't exist.		 */		public function getAttribute(name:String, defaultValue:String=null):String 		{			var result:String = _xmlNode.attributes[name];			if (result == null) result = defaultValue;			return result; 		}				/**		 * Retrieves the specified attribute as integer. If the attribute isn't found, then the		 * <code>defaultValue</code> is returned. Elste the specified <code>radix</code> is used to		 * parse the value with the <code>parseInt</code> global function.		 * <p>Note that the return type is denoted as <code>Number</code> because <code>int</code> and		 * <code>uint</code> doesn't support the <code>NaN</code> value.</p>		 * 		 * @param	name			The attribute name.		 * @param	defaultValue	The default value.		 * @param	radix			The base for the attribute parsing.		 * @return	The value parsed as integer or the <code>defaultValue</code> (attribute not found) or <code>NaN</code> (not parsable value).		 * @see	ch.capi.utils.ParseUtils#parseInteger ParseUtils.parseInteger()		 */		public function getAttributeAsInt(name:String, defaultValue:Number=0, radix:int=0):Number		{			var result:String = getAttribute(name);			if (result == null) return defaultValue;			return ParseUtils.parseInteger(result, radix);		}				/**		 * Retrieves the specified attribute as <code>Number</code>. If the attribute isn't found, then the		 * <code>defaultValue</code> is returned. Else the value is parsed using the <code>parseFloat</code>		 * global function.		 * 		 * @param	name			The attribute name.		 * @param	defaultValue	The default value.		 * @return	The value parsed as a <code>Number</code> or the <code>defaultValue</code> (attribute not found) or <code>NaN</code> (not parsable value).		 * @see	ch.capi.utils.ParseUtils#parseNumber ParseUtils.parseNumber()		 */		public function getAttributeAsNumber(name:String, defaultValue:Number=0):Number		{			var result:String = getAttribute(name);			if (result == null) return defaultValue;			return ParseUtils.parseNumber(result);		}				/**		 * Retrieves the specified attribute as <code>Boolean</code>. If the attribute doesn't exist,		 * <code>false</code> is returned.		 * 		 * @param	name	The name of the attribute.		 * @param	defaultValue	The default value.		 * @return The boolean value or <code>defaultValue</code> if the attribute doesn't exist.		 * @see	ch.capi.utils.ParseUtils#parseBoolean ParseUtils.parseBoolean()		 */		public function getAttributeAsBoolean(name:String, defaultValue:Boolean=false):Boolean		{			var result:String = getAttribute(name);			if (result == null) return defaultValue;			return ParseUtils.parseBoolean(result);		}				/**		 * Set the value to the specified attribute.		 * 		 * @param	name	The attribute name.		 * @param	value	The attribute value (<code>null</code> to delete).		 * @return	The old value or <code>null</code> if the attribute didn't exist before.		 */		public function setAttribute(name:String, value:*=null):String		{			var currentValue:String = _xmlNode.attributes[name];			if (value == null) delete _xmlNode.attributes[name];			else _xmlNode.attributes[name] = value.toString();			return currentValue;		}				/**		 * Retrieves if the specified attribute exist into the <code>XMLDescriptor</code> on the root <code>XMLNode</code>.		 * 		 * @param	name		The attribute name.		 * @return <code>true</code> if the attribute exists.		 */		public function hasAttribute(name:String):Boolean		{			return (name in _xmlNode.attributes);		}
		/**		 * Retrieves the text of the <code>XMLDescriptor</code> node. This method will retrieves the <code>nodeValue</code>		 * attribute of the current <code>XMLNode</code>. If the <code>strict</code> argument is <code>true</code>, then this value		 * will be returned however its value is <code>null</code>. If the <code>strict</code> argument is <code>false</code> and 		 * the <code>nodeValue</code> is <code>null</code>, the method will return the first text node <code>nodeValue</code> property.		 * 		 * @param	strict		Indicates if the text should be retrieved on the first text node if the <code>nodeValue</code> is <code>null</code>.		 * @return	The text of the node or <code>null</code>.		 * @see		#getTextNode()	getTextNode()		 */		public function getText(strict:Boolean=false):String		{			var text:String = _xmlNode.nodeValue;			if (strict || text != null) return text;						var textNode:XMLNode = getTextNode();			if (textNode == null) return null;			return textNode.nodeValue;		}		/**		 * Retrieves the trimmed text of the <code>XMLDescriptor</code> node.		 * 		 * @param	strict	Indicates if the text should be retrieved on the first text node if the <code>nodeValue</code> is <code>null</code>.		 * @return	The text of the node or <code>null</code> if there is only blank chars or no text.		 * @see		#getTextNode()	getTextNode()		 */		public function getTextTrim(strict:Boolean=false):String		{			var r:RegExp = /^\s*(.*?)\s*$/g;			var result:String = getText(strict).replace(r, "$1");			return (result.length == 0) ? null : result;		}				/**		 * Set the specified text to the node.		 * 		 * @param	text		The text to set.		 * @param 	strict		Indicates if the text can be set into the first text node if the current node is not a text node.		 * @see		#getTextNode()	getTextNode()		 */		public function setText(text:String, strict:Boolean=false):void		{			if (_xmlNode.nodeType == XMLNodeType.TEXT_NODE) _xmlNode.nodeValue = text;			else if (strict) throw new Error("The node is invalid (not a text node)");			else			{				var textNode:XMLNode = getTextNode();				if (textNode == null) _xmlNode.appendChild(new XMLNode(XMLNodeType.TEXT_NODE, text));				else _xmlNode.firstChild.nodeValue = text;			}		}		/**		 * Retrieves the node text as integer. If the node has no text, then the		 * <code>defaultValue</code> is returned.		 * 		 * @param	defaultValue	The default value.		 * @param	radix			The base for the attribute parsing.		 * @param	strict			Indicates if the text should be retrieved on the first text node if the <code>nodeValue</code> is <code>null</code>.		 * @return	The value parsed as integer or the <code>defaultValue</code> (attribute not found) or <code>NaN</code> (not parsable value).		 * @see		#getTextNode()	getTextNode()		 * @see	ch.capi.utils.ParseUtils#parseInteger ParseUtils.parseInteger()		 */		public function getTextAsInt(defaultValue:int=0, radix:int=0, strict:Boolean=false):int		{			var result:String = getText(strict);			if (result == null) return defaultValue;			return ParseUtils.parseInteger(result, radix);		}				/**		 * Retrieves the text node as <code>Number</code>. If the node has no text, then the		 * <code>defaultValue</code> is returned.		 * 		 * @param	defaultValue	The default value.		 * @param	strict			Indicates if the text should be retrieved on the first text node if the <code>nodeValue</code> is <code>null</code>.		 * @return	The value parsed as a <code>Number</code> or the <code>defaultValue</code> (attribute not found).		 * @see		#getTextNode()	getTextNode()		 * @see	ch.capi.utils.ParseUtils#parseNumber ParseUtils.parseNumber()		 */		public function getTextAsNumber(defaultValue:Number=0, strict:Boolean=false):Number		{			var result:String = getText(strict);			if (result == null) return defaultValue;			return ParseUtils.parseNumber(result);		}				/**		 * Retrieves the text node as <code>Boolean</code>. If the node has no text, then the		 * <code>defaultValue</code> is returned.		 * 		 * @param	defaultValue	The default value.		 * @param	strict			Indicates if the text should be retrieved on the first text node if the <code>nodeValue</code> is <code>null</code>.		 * @return	The value parsed as a <code>Boolean</code> or the <code>defaultValue</code> (attribute not found).		 * @see		ch.capi.utils.ParseUtils#parseBoolean	ParseUtils.parseBoolean()		 */		public function getTextAsBoolean(defaultValue:Boolean=false, strict:Boolean=false):Boolean		{			var result:String = getText(strict);			if (result == null) return defaultValue;			return ParseUtils.parseBoolean(result);		}				/**		 * Retrieves if the <code>XMLDescriptor</code> has a text.		 * 		 * @param	strict	Indicates if the text should be retrieved on the first text node if the <code>nodeValue</code> is <code>null</code>.		 * @return	<code>true</code> if the text node is not <code>null</code> and its length is greater than zero.		 * @see		#isTextEnough() isTextEnough()		 * @see		#getTextNode()	getTextNode()		 */		public function hasText(strict:Boolean=false):Boolean		{			var text:String = getText(strict);			return isTextEnough(text);		}				/**		 * Retrieves if the <code>XMLDescriptor</code> has a trimmed text.		 * 		 * @param	strict	Indicates if the text should be retrieved on the first text node if the <code>nodeValue</code> is <code>null</code>.		 * @return	<code>true</code> if the text node is not <code>null</code> and its length is greater than zero.		 * @see		#isTextEnough() isTextEnough()		 */		public function hasTextTrim(strict:Boolean=false):Boolean		{			var text:String = getTextTrim(strict);			return isTextEnough(text);		}				/**		 * Retrieves the <code>XMLDescriptor</code> as a <code>String</code>. This method will simply use the 		 * <code>XMLNode.toString()</code> method.		 * 		 * @return	The <code>XMLDescriptor</code> as a <code>String</code>.		 */		public function toString():String		{			return _xmlNode.toString();		}				/**		 * Retrieves the <code>XMLDescriptor</code> as a <code>String</code>. This method will simply use the 		 * <code>XML.toXMLString()</code> method.		 * 		 * @return	The <code>XMLDescriptor</code> as a <code>String</code>.		 */		public function toXMLString():String		{			return toXML().toXMLString();		}				/**		 * Retrieves a <code>XML</code> of the <code>XMLDescriptor</code>.		 * 		 * @return	A <code>XML</code> instance based on the <code>XMLDescriptor</code>.		 */		public function toXML():XML		{			return new XML(_xmlNode.toString());		}				/**		 * Retrieves a <code>XMLDocument</code> of the <code>XMLDescriptor</code>.		 * 		 * @return	A <code>XMLDocument</code> instance based on the <code>XMLDescriptor</code>.		 */		public function toXMLDocument():XMLDocument		{			var document:XMLDocument = new XMLDocument();			document.ignoreWhite = true;			document.parseXML(_xmlNode.toString());			return document;		}				/**		 * Retrieves a cloned <code>XMLNode</code>.		 * 		 * @param	deepClone	If the <code>XMLNode</code> must be cloned deeply.		 * @return	The cloned <code>XMLNode</code>.		 */		public function toXMLNode(deepClone:Boolean=true):XMLNode		{			return _xmlNode.cloneNode(deepClone);		}		/**		 * Returns a deep clone of the current <code>XMLDescriptor</code>.		 * 		 * @return	A deep clone of the current <code>XMLDescriptor</code>.		 */		public function clone():Object		{			return new XMLDescriptor(toXMLNode(true));		}		//-----------------//		//Protected methods//		//-----------------//				/**		 * Parses the specified object to a <code>XMLNode</code>. There are the actions of the method :<br />		 * <ul>		 * 	<li>If <code>source</code> is a <strong>XML</strong>, the <code>String</code> is retrieved and sent to a <code>XMLDocument</code>		 * 	    to be parsed. Then, the <code>firstChild</code> is returned.</li>		 * 	<li>If <code>source</code> is a <strong>XMLDocuement</strong>, the <code>firstChild</code> will be returned.</li>		 * 	<li>If <code>source</code> is a <strong>XMLNode</strong>, it is simply returned.</li>		 * 	<li>If <code>source</code> is a <strong>String</strong>, a <code>XMLDocument</code> is used to parse it and the <code>firstChild</code>		 * 		is returned.</li>		 * </ul>		 * <p>For the parsing with the <code>XMLDocument</code> object, the <code>ignoreWhite</code> attribute is always set to <code>true</code>.</p>		 * 		 * @param	source		The source object.		 * @throws	ArgumentError	If the source is <code>null</code> or invalid.		 */		protected function parseSource(source:Object):XMLNode		{			if (source == null) throw new ArgumentError("The source object is not defined");						if (source is XMLDocument) return (source as XMLDocument).firstChild;			if (source is XMLNode) return source as XMLNode;						var parser:XMLDocument = new XMLDocument();			parser.ignoreWhite = true;						if (source is XML) parser.parseXML((source as XML).toString());			else if (source is String) parser.parseXML(source as String);			else throw new ArgumentError("The type '"+(typeof source)+"' is not recognized");						return parser.firstChild;		}				/**		 * Retrieves if the specified <code>String</code> is good enough to be considered as a valid node text. This		 * method simply checks if the specified text is not <code>null</code> and has a length greater than 0.		 * 		 * @param	text		A node text.		 * @return	<code>true</code> if the <code>String</code> is good enough. 		 */		protected function isTextEnough(text:String=null):Boolean		{			return (text != null && text.length > 0);		}				/**		 * Retrieves the first text node into the first level sub-nodes of the specified node. If the		 * specified node is <code>null</code> the current node will be used.		 * 		 * @param	node		The node to retrieve de text node.		 * @return	The first text node or <code>null</code> if there is no text node.		 */		protected function getTextNode(node:XMLNode=null):XMLNode		{			if (node == null) node = _xmlNode;			for each(var subnode:XMLNode in node.childNodes)			{				if (subnode.nodeType == XMLNodeType.TEXT_NODE)				{					return subnode;				}			}						return null;		}				//---------------//		//Private methods//		//---------------//	}}