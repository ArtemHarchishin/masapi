#labels Presentation,Installation,Using
#Masapi project presentation 

= Project masapi =

The target of the Masapi is to provide a complete framework dedicated to the management of the massive loading into a flash/flex application. It is designed to be as easy as possible to use but also to be as flexible as possible.

Here is a simple piece of code showing how it works :
{{{
import ch.capi.net.*;

//creates the file factory
var factory:LoadableFileFactory = new LoadableFileFactory();

//creates the files to load
var file1:ILoadableFile = factory.create("myFile.txt");
var file2:ILoadableFile = factory.create("myFile.swf");

//creates the load manager
var loader:MassLoader = new MassLoader();

//add the files to the loading queue
loader.addFile(file1);
loader.addFile(file2);

//starts the loading
loader.start();
}}}

= Installing masapi = 

This is quite simple : just put the 'src/ch' folder in the same place of your fla. If you have a bit more experience, just add the 'src/ch' folder into your classpath, and you're done !

= Using masapi =

Basically, there are 3 steps to use a the lowest features of the masapi framework :
  * Link programmatically the files to load (using a factory)
  * Put those files into the loading queue of the MassLoader
  * Start the loading

== 1st step : link the files ==

In order to be able to link the files, you must create a LoadableFileFactory, issued from the ch.capi.net package. Then you can link directly the files that you want to load, using the ILoadableFile interface into the same package :
{{{
import ch.capi.net.*;

//creates the factory
var factory.LoadableFileFactory = new LoadableFileFactory();

//link the files to load
var file1:ILoadableFile = factory.create("foo.txt");
var file2:ILoadableFile = factory.create("bar.swf");
}}}

*Note:* By default, the load manager object (URLLoader, Loader, Sound, ...) will be chosen depending of the extension that you provide. By default, the following extensions are known :
   * txt : URLLoader (dataFormat = "variables")
   * xml : URLLoader (dataFormat = "text")
   * jpg : URLLoader (dataFormat = "binary")
   * jpeg : URLLoader (dataFormat = "binary")
   * gif : URLLoader (dataFormat = "binary")
   * png : URLLoader (dataFormat = "binary")
   * swf : Loader
   * mp3 : Sound
   * _none_ : URLStream

== 2nd step : the loading queue ==

After you've created the files, you can creates the massive loading manager. If you don't need specific features to prioritize the files, then just use the MassLoader class and add your files into the loading queue :
{{{
import ch.capi.net.*;

//creates the factory
var factory.LoadableFileFactory = new LoadableFileFactory();

//link the files to load
var file1:ILoadableFile = factory.create("foo.txt");
var file2:ILoadableFile = factory.create("bar.swf");

//creates the massive loader
var massloader:MassLoader = new MassLoader();

//add the files into the loading queue
massloader.addFile(file1);
massloader.addFile(file2);
}}}

If you _need_ to prioritize the files, you'll have to use the PriorityMassLoader which is a subclass of MassLoader that provides this feature.

== 3rd step : launch the loading ==

A really simple step : just call the start method on your MassLoader instance :
{{{
import ch.capi.net.*;

//creates the factory
var factory.LoadableFileFactory = new LoadableFileFactory();

//link the files to load
var file1:ILoadableFile = factory.create("foo.txt");
var file2:ILoadableFile = factory.create("bar.swf");

//creates the massive loader
var massloader:MassLoader = new MassLoader();

//add the files into the loading queue
massloader.addFile(file1);
massloader.addFile(file2);

//starts the loading
massloader.start();
}}}

By default, the MassLoader will launch the loading of all the files together. You can change this behavior (for instance if you want a sequential loading) by modifying the _parallelFiles_ property.