#summary Event management of masapi
#labels HOWTO

= Introduction =

The [http://code.google.com/p/masapi/wiki/CoreStructure core api classes] use a way to manage generic events that occurs during a load operation. This section will explain how to handle those events.

= Events handling =

In order to understand what comes, you should be able to understand how to handle an event in ActionScript 3. Here is a list of the events managed by a loadable file (`ILoadableFile`) and a massive loader (`IMassLoader`) :
  * `Event.OPEN` : load operation started
  * `ProgressEvent.PROGRESS` : part of the data received
  * `Event.COMPLETE` : load operation complete
  * `IOErrorEvent.IO_ERROR` : i/o error during the load operation
  * `SecurityErrorEvent:SECURITY_ERROR` : security error during the load operation

== ILoadableFile events ==

Basically, the events managed here are the same as the events managed by a `URLLoader`, `Loader` and other load manager objects. So the way to listen to them doesn't differ from that :
{{{
import ch.capi.net.*;

var myFile:ILoadableFile = ...; //loadable file created by the LoadableFileFactory

var onOpen:Function = function(evt:Event):void { trace("open"); }
myFile.addEventListener(Event.OPEN, onOpen);
}}}

You also have a shorter way to add listeners to the `ILoadableFile` you create :
{{{
import ch.capi.net.*;

var factory:LoadableFileFactory = new LoadableFileFactory();

var onOpen:Function = function(evt:Event):void { trace("open"); }
var onProgress:Function = function(evt:ProgressEvent):void { trace("progress"); }
var onComplete:Function = function(evt:Event):vodi { trace("complete"); }

var file:ILoadableFile = factory.create("file.txt", onOpen, onProgress, onComplete);
}}}

== IMassLoader events ==

Such as a `ILoadableFile` object, the `IMassLoader` objects manage the same events listed above. There are two other events that are very useful to retrieves dynamically the `ILoadableFile` objects that are being loaded :
  * `MassLoadEvent.FILE_OPEN` : the load of a `ILoadableFile` begins
  * `MassLoadEvent.FILE_CLOSE : the load of a `ILoadableFile` is closed (load complete or error)

The `MassLoader` (standard implementation of the `IMassLoader` interface) *doesn't matter if the file is successfully loaded or not*.

{{{
import ch.capi.net.*;
import ch.capi.events.*;

var ml:IMassLoader = new MassLoader();

//create & add the files to the loading queue
//....

var onFileOpen:Function = function(evt:MassLoadEvent):void
{
   if (evt.file is ILoadableFile)
   {
      var cf:ILoadableFile = evt.file as ILoadableFile;
      trace("File open : "+cf.urlRequest.url);
   }
}
ml.addEventListener(MassLoadEvent.FILE_OPEN, onFileOpen);

var onFileClose:Function = function(evt:MassLoadEvent):void
{
   if (evt.file is ILoadableFile)
   {
     if (evt.isError()) //oh !! error during the download
     {
       trace("error : "+evt.closeEvent);
     }

     var cf:ILoadableFile = evt.file as ILoadableFile;
     trace("File close : "+cf.urlRequest.url);
   }
}
ml.addEventListener(MassLoadEvent.FILE_CLOSE, onFileClose);

ml.start();
}}}

You can also listen to the other events (for example to retrieve the [http://code.google.com/p/masapi/wiki/OverallProgress overall progress] of your download) :
{{{
import ch.capi.net.*;

var ml:IMassLoader = new MassLoader();

//create & add the files to the loading queue
//....

var onOpen:Function = function(evt:Event):void { trace("MassLoad open"); }
var onComplete:Function = function(evt:Event):void { trace("MassLoad complete"); }
var onProgress:Function = function(evt:ProgressEvent):void
{
   var pct:uint = Math.floor((evt.bytesLoaded/evt.bytesTotal)*100);
   trace("Overall progress : "+pct+"100%");
}

ml.addEventListener(Event.OPEN, onOpen);
ml.addEventListener(Event.COMPLETE, onComplete);
ml.addEventListener(ProgressEvent.PROGRESS, onProgress);

ml.start();
}}}
 
 