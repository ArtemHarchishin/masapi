#summary Parallel files downloading
#labels HOWTO

= Introduction =

Depending of your project, it can be very useful to load the files sequentially (one by one)  instead of all together (low bandwidth for example). Masapi offers you to manage the number of files being loaded together, using the `parallelFiles` property.

= Global `MassLoader` =

By default, all the files will be loaded together. Here is a simple piece of code showing how it works :
{{{
import ch.capi.net.*;

var factory:LoadableFileFactory = new LoadableFileFactory();
var file1:ILoadableFile = factory.create("file1.swf");
var file2:ILoadableFile = factory.create("file2.swf");
var file3:ILoadableFile = factory.create("file3.swf");

var massloader:MassLoader = new MassLoader();

//creates the event functions
var onOpen:Function = function(evt:Event):void { trace("MassLoad open"); }
var onProgress:Function = function(evt:ProgressEvent):void { trace("progres..."); }
var onComplete:Function = function(evt:ProgressEvent):void { trace("complete"); }
var fileOpen:Function = function(evt:MassLoadEvent):void { trace("file open : "+(evt.target as ILoadableFile).urlRequest.url); }
var fileClose:Funnction = function(evt:MassLoadEvent):void { trace("file close : "+(evt.target as ILoadableFile).urlRequest.url); }

//register the events
massloader.addEventListener(Event.OPEN, onOpen);
massloader.addEventListener(ProgressEvent.PROGRESS, onOprogress);
massloader.addEventListener(Event.COMPLETE, onComplete);
massloader.addEventListener(MassLoadEvent.FILE_OPEN, fileOpen);
massloader.addEventListener(MassLoadEvent.FILE_CLOSE, fileClose);

//adding the files
massloader.addFile(file1);
massloader.addFile(file2);
massloader.addFile(file3);

massloader.start();
}}}

You'll have the following output :
{{{
open
file open : file1.swf
file open : file2.swf
file open : file3.swf
progress...
progress...
progress...
...
file close : file1.swf
file close : file2.swf
file close : file3.swf
complete
}}}

Until the first `ProgressEvent.PROGRESS` is dispatched by the `MassLoader`, there can be some time to wait, because the progress events are only dispatched when all the files into the loading queue have been open. So if you specifed '2' for the `parallelFiles` value, the `MassLoader` will wait until two files are open before dispatch the progress events. 

If you want to avoid this behavior and reset it to default, set the `alwaysDispatchProgressEvent` to `true`. So the progress events will be dispatched each time a `ILoadableFile` dispatches a progress event.

= Sequential `MassLoader` =

Regarding the piece of code above, there is only one thing to change : just say to the `MassLoader` that you want to load your files one by one, setting the `parallelFiles` value to 1 or using the constructor argument :
{{{
import ch.capi.net.*;

var factory:LoadableFileFactory = new LoadableFileFactory();
var file1:ILoadableFile = factory.create("file1.swf");
var file2:ILoadableFile = factory.create("file2.swf");
var file3:ILoadableFile = factory.create("file3.swf");

var massloader:MassLoader = new MassLoader(1);
//or
//massloader.parallelFiles = 1;

//creates the event functions
var onOpen:Function = function(evt:Event):void { trace("MassLoad open"); }
var onProgress:Function = function(evt:ProgressEvent):void { trace("progres..."); }
var onComplete:Function = function(evt:ProgressEvent):void { trace("complete"); }
var fileOpen:Function = function(evt:MassLoadEvent):void { trace("file open : "+(evt.file as ILoadableFile).urlRequest.url); }
var fileClose:Funnction = function(evt:MassLoadEvent):void { trace("file close : "+(evt.file as ILoadableFile).urlRequest.url); }

//register the events
massloader.addEventListener(Event.OPEN, onOpen);
massloader.addEventListener(ProgressEvent.PROGRESS, onOprogress);
massloader.addEventListener(Event.COMPLETE, onComplete);
massloader.addEventListener(MassLoadEvent.FILE_OPEN, fileOpen);
massloader.addEventListener(MassLoadEvent.FILE_CLOSE, fileClose);

//adding the files
massloader.addFile(file1);
massloader.addFile(file2);
massloader.addFile(file3);

massloader.start();
}}}

You'll have the following output :
{{{
open
file open : file1.swf
progress...
file close : file1.swf
file open : file2.swf
progress...
file close : file2.swf
file open : file3.swf
progress...
file close : file3.swf
complete
}}}
 
= See also =

  * [http://code.google.com/p/masapi/wiki/OverallProgress About the overall progress]
  * [http://code.google.com/p/masapi/wiki/ProgressManagement Managing the progression]
 
 
 
 