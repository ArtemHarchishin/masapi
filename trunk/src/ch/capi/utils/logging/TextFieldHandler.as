package ch.capi.utils.logging{	import flash.display.DisplayObjectContainer;	import flash.text.TextFormat;	import flash.text.TextField;	/**	 * 	 * 	 * @author		Cedric Tabin - thecaptain	 * @version		1.0	 */	public class TextFieldHandler implements ILogHandler	{		//---------//		//Constants//		//---------//				//---------//		//Variables//		//---------//		private var _field:TextField;				//-----------------//		//Getters & Setters//		//-----------------//				/**		 * Defines the <code>TextField</code> where the log is appened.		 */		public function get field():TextField { return _field; }				//-----------//		//Constructor//		//-----------//				/**		 * Creates a new <code>TextFieldHandler</code> object.		 * 		 * @param	field		The <code>TextField</code> to use.		 */		public function TextFieldHandler(field:TextField):void		{			_field = field;		}				//--------------//		//Public methods//		//--------------//		/**		 * Creates a simple <code>TextField</code> and use it to create a new		 * <code>TextFieldHandler</code> instance. If a <code>Sprite</code> is 		 * specified, the <code>TextField</code> will be added as child. If a		 * <code>Logger</code> is specified, the handler will automatically be		 * added to it.		 * 		 * @param	container		A container for the created <code>TextField</code>.		 * @param	logger			A <code>Logger</code> to add the <code>TextFieldHandler</code>.		 * @return	The created <code>TextFieldHandler</code>. 		 */		public static function create(container:DisplayObjectContainer=null, logger:Logger=null):TextFieldHandler		{			var format:TextFormat = new TextFormat();			format.size = 12;			format.font = "Courier New";						var field:TextField = new TextField();			field.width = 800;			field.height = 400;			field.border = true;			field.borderColor = 0;			field.background = true;			field.backgroundColor = 0xFFFFFF;			field.selectable = true;			field.multiline = true;			field.wordWrap = true;			field.defaultTextFormat = format;						var handler:TextFieldHandler = new TextFieldHandler(field);						if (container != null) container.addChild(field);				if (logger != null) logger.logHandlers.push(handler);						return handler;		}		/**		 * Process the log information.		 * 		 * @param	level		The logging level.		 * @param	text		The text to log.		 * @param	methodPath	The method complete name.				 */		public function log(level:int, text:String, methodPath:String=null):void		{			var levelName:String = "["+LogLevel.getAsString(level)+"]";						if (methodPath == null) _field.appendText(levelName+": "+text);			else _field.appendText(levelName+" "+methodPath+": "+text);						_field.appendText("\n");			_field.scrollV = _field.maxScrollV;		}		//-----------------//		//Protected methods//		//-----------------//				//---------------//		//Private methods//		//---------------//	}}