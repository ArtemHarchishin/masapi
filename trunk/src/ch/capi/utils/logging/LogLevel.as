package ch.capi.utils.logging{	/**	 * Defines the most-used logging levels.	 * 	 * @author		Cedric Tabin - thecaptain	 * @version		1.0	 */	public class LogLevel	{		//---------//		//Constants//		//---------//				/**		 * All the log will be traced.		 */		public static const ALL:int = -1;				/**		 * The FINEST level is for huge logging.		 */		public static const FINEST:int = 10;				/**		 * The FINER level is for medium-heavy logging.		 */		public static const FINER:int = 50;				/**		 * The FINE level is for medium-low logging.		 */		public static const FINE:int = 100;				/**		 * The INFO level is for low logging.		 */		public static const INFO:int = 200;				/**		 * The CONFIG level is for configuration tracing.		 */		public static const CONFIG:int = 150;				/**		 * The WARNING level is to inform that some unsafe / unexpected actions		 * have been performed.		 */		public static const WARNING:int = 500;				/**		 * The SEVERE level is to inform that something went wrong and that the		 * program shouldn't handle that fault.		 */		public static const SEVERE:int = 1000;				/**		 * There will be no logging at all.		 */		public static const NONE:int = 99999;				//--------------//		//Public methods//		//--------------//				/**		 * Returns the specified level as <code>String</code>. If the level		 * doesn't correspond to a known level, <code>null</code> is returned.		 * 		 * @param	level		The level.		 * @return	A <code>String</code> representing the level or <code>null</code>.		 */		public static function getAsString(level:int):String		{			if (level == ALL) return "ALL";			if (level == FINEST) return "FINEST";			if (level == FINER) return "FINER";			if (level == FINE) return "FINE";			if (level == INFO) return "INFO";			if (level == CONFIG) return "CONFIG";			if (level == WARNING) return "WARNING";			if (level == SEVERE) return "SEVERE";			if (level == NONE) return "NONE";						return null;		}				/**		 * Returns the specified <code>String</code> as level. The <code>String</code>		 * must be issued from the constants. If the level is not found, then <code>ALL</code>		 * will be returned.		 * 		 * @param	level	The level name.		 * @return	The level corresponding to the name.		 */		public static function getLevelFromString(level:String):int		{			if (level == "FINEST") return FINEST;			if (level == "FINER") return FINER;			if (level == "FINE") return FINE;			if (level == "INFO") return INFO;			if (level == "CONFIG") return CONFIG;			if (level == "WARNING") return WARNING;			if (level == "SEVERE") return SEVERE;			if (level == "NONE") return NONE;						return ALL;		}	}}