package ch.capi.utils.logging{	import flash.system.Capabilities;		/**	 * Manages the logging.	 * 	 * @author		Cedric Tabin - thecaptain	 * @version		1.0	 * @see			ch.capi.utils.logging.ILogHandler ILogHandler	 */	public class Logger	{		//---------//		//Constants//		//---------//				/**		 * Defines the global <code>Logger</code>. This <code>Logger</code> has		 * no parent and a default handler which is a <code>TraceHandler</code>. By		 * default, its level is <code>LogLevel.INFO</code>		 */		public static const GLOBAL:Logger = new Logger("", null, LogLevel.INFO, new TraceHandler());				//---------//		//Variables//		//---------//		private var _name:String;		private var _logHandlers:Array 	= new Array();		private var _parent:Logger 		= null;		private var _level:int			= LogLevel.WARNING;				//-----------------//		//Getters & Setters//		//-----------------//				/**		 * Defines the name of the <code>Logger</code>.		 */		public function get name():String { return _name; }				/**		 * Defines the log handlers. The array contains instances		 * of <code>ILogHandler</code>.		 * 		 * @see		ch.capi.utils.logging.ILogHandler ILogHandler		 */		public function get logHandlers():Array { return _logHandlers; }				/**		 * Defines the parent <code>Logger</code>.		 */		public function get parent():Logger { return _parent; }				/**		 * Defines the log level of the <code>Logger</code>.		 */		public function get logLevel():int { return _level; }		public function set logLevel(value:int):void { _level = value; }				//-----------//		//Constructor//		//-----------//				/**		 * Creates a new <code>Logger</code> object.		 * 		 * @param	parent	The parent <code>Logger</code>.		 * @see		ch.capi.utils.logging.ILogHandler ILogHandler		 */		public function Logger(name:String, parent:Logger=null, logLevel:int=0, ...defaultHandlers:Array):void 		{			_name = name;			_parent = parent;			_level = logLevel;						for(var i:int=0 ; i<defaultHandlers.length ; i++)			{				var h:ILogHandler = defaultHandlers[i];				logHandlers.push(h);			}		}				//--------------//		//Public methods//		//--------------//		/**		 * Log the text with the specified text only if the current		 * log level is lower or equal that the specified level. If the		 * log can be processed, it is first sent to the parent and then		 * to the handlers.		 * 		 * @param	level		The level of the log.		 * @param	text		The text to log.		 * @param	args		The arguments of the text.		 * @see		#replaceVars()	Log variables		 */		public function log(level:int, text:String, ...args:Array):void		{			//no log processing			if (logLevel > level) return;					//send the log to the parent if available			if (parent != null)			{				parent.log(level, text, args);			}						//add the text element to the array			args.unshift(text);						//processes the log on each handler			var log:String = replaceVars.apply(this, args);			var method:String = extractCaller();			for each(var handler:ILogHandler in logHandlers)			{				handler.log(level, log, method);			}		}		/**		 * Logs a message at the level <code>LogLevel.FINEST</code>.		 * 		 * @param	text		The text to log.		 * @param	args		The arguments of the text.		 * @see		#log()		Global log method		 */		public function finest(text:String, ...args:Array):void		{			args.unshift(text);			args.unshift(LogLevel.FINEST);						log.apply(this, args);		}				/**		 * Logs a message at the level <code>LogLevel.FINER</code>.		 * 		 * @param	text		The text to log.		 * @param	args		The arguments of the text.		 * @see		#log()		Global log method		 */		public function finer(text:String, ...args:Array):void		{			args.unshift(text);			args.unshift(LogLevel.FINER);						log.apply(this, args);		}		/**		 * Logs a message at the level <code>LogLevel.FINE</code>.		 * 		 * @param	text		The text to log.		 * @param	args		The arguments of the text.		 * @see		#log()		Global log method		 */		public function fine(text:String, ...args:Array):void		{			args.unshift(text);			args.unshift(LogLevel.FINE);						log.apply(this, args);		}		/**		 * Logs a message at the level <code>LogLevel.INFO</code>.		 * 		 * @param	text		The text to log.		 * @param	args		The arguments of the text.		 * @see		#log()		Global log method		 */		public function info(text:String, ...args:Array):void		{			args.unshift(text);			args.unshift(LogLevel.INFO);						log.apply(this, args);		}				/**		 * Logs a message at the level <code>LogLevel.CONFIG</code>.		 * 		 * @param	text		The text to log.		 * @param	args		The arguments of the text.		 * @see		#log()		Global log method		 */		public function config(text:String, ...args:Array):void		{			args.unshift(text);			args.unshift(LogLevel.CONFIG);						log.apply(this, args);		}		/**		 * Logs a message at the level <code>LogLevel.WARNING</code>.		 * 		 * @param	text		The text to log.		 * @param	args		The arguments of the text.		 * @see		#log()		Global log method		 */		public function warning(text:String, ...args:Array):void		{			args.unshift(text);			args.unshift(LogLevel.WARNING);						log.apply(this, args);		}				/**		 * Logs a message at the level <code>LogLevel.SEVERE</code>.		 * 		 * @param	text		The text to log.		 * @param	args		The arguments of the text.		 * @see		#log()		Global log method		 */		public function severe(text:String, ...args:Array):void		{			args.unshift(text);			args.unshift(LogLevel.SEVERE);						log.apply(this, args);		}		//-----------------//		//Protected methods//		//-----------------//				/**		 * Processes the variables replacement. A variable is denoted by a '?' followed		 * with a index starting with 1. For the replace, the <code>toString()</code> method		 * is called on each element of the <code>args</code> array.		 * 		 * @param	text	The text with variables.		 * @param 	args	The arguments to replace into the text.		 * @return	The text with the replaced vars.		 * 		 * @example		 * <listing version="3.0">		 * var txt:String = replaceVars("Hello ?1, This is ?2 speaking", "Sarah", "Cedric");		 * //Hello Sarah, This is Cedric speaking		 * </listing>		 */		protected function replaceVars(text:String, ...args:Array):String		{			for(var i:int=0 ; i<args.length ; i++)			{				var arg:String = "?"+(i+1);				var str:String = args[i].toString();								text = text.replace(arg, str);				}						return text;		}				/**		 * Retrieves the stack trace into an Array. If the player is not a debug player,		 * this method simply returns <code>null</code>.		 * <p>The first line of the stack trace (the error message) is not into the		 * returned <code>Array</code>.</p>		 * 		 * @return	The stack trace in an <code>Array</code> or <code>null</code>.		 */		protected function getStackTrace():Array		{			var isDebug:Boolean = Capabilities.isDebugger;			if (!isDebug) return null;						var err:Error = new Error();			var stack:String = err.getStackTrace();					var stackFlow:Array = stack.split("\n");			stackFlow.splice(0, 1); //the first line is the error message						return stackFlow;		}				//---------------//		//Private methods//		//---------------//				/**		 * @private		 */		private function extractCaller():String		{			var st:Array = getStackTrace();			if (st == null) return null;						for each(var line:String in st)			{				var method:String = extractMethodFromStackTraceLine(line);				if (method.indexOf("ch.capi.utils.logging") == -1 &&					method.indexOf("Function/http://adobe.com/AS3/2006/builtin::apply") == -1)				{					//pretty-printing					method = method.replace("::", ".");					method = method.replace("/", ".");										return method;				}			}						//should not happen			return "UnknownMethod";		}				/**		 * @private		 */		private function extractMethodFromStackTraceLine(stackTraceLine:String):String		{			var at:int = stackTraceLine.indexOf("at ");			var method:String = stackTraceLine.substring(at+3);						var pa:int = method.indexOf("(");			method = method.substring(0, pa);						return method;		}	}}