package ch.capi.net.policies{	import ch.capi.net.ILoadableFile;		import ch.capi.net.IContextPolicy;	
	import ch.capi.utils.DomainUtils;			import flash.system.LoaderContext;	import flash.media.SoundLoaderContext;			/**	 * Default implementation of a <code>IContextPolicy</code>.	 * 	 * @author		Cedric Tabin - thecaptain	 * @version		1.0	 * @see			ch.capi.utils.DomainUtils	DomainUtils	 */	public class DefaultContextPolicy implements IContextPolicy	{		//---------//		//Constants//		//---------//				//---------//		//Variables//		//---------//		private var _defaultAppDomainPolicy:String;		private var _defaultSecDomainPolicy:String;				/**		 * The number of milliseconds to preload a streaming sound into a buffer before the sound starts to stream.		 * This value will be sent to the created <code>SoundLoaderContext</code>.		 */		public var bufferTime:Number = 1000;				/**		 * Specifies whether the application should try to download a URL policy file. This value will be		 * sent to the created <code>LoaderContext</code>/<code>SoundLoaderContext</code> objects.		 */		public var checkPolicyFile:Boolean = false;				//-----------------//		//Getters & Setters//		//-----------------//				/**		 * Defines the behavior to create the <code>ApplicationDomain</code>. This value can		 * be one of the following constants : <code>DomainUtils.APPDOMAIN_NONE</code>, <code>DomainUtils.APPDOMAIN_CREATE</code>,		 * <code>DomainUtils.APPDOMAIN_CHILD</code> or <code>DomainUtils.APPDOMAIN_CURRENT</code>.		 * 		 * @see		ch.capi.utils.DomainUtils DomainUtils		 */		public function get defaultAppDomainPolicy():String { return _defaultAppDomainPolicy; }		public function set defaultAppDomainPolicy(value:String):void { _defaultAppDomainPolicy = value; } 				/**		 * Defines the behavior to use the <code>SecuritDomain</code>. This value can be		 * one of the following constants : <code>DomainUtils.SECDOMAIN_CURRENT</code> or <code>DomainUtils.SECDOMAIN_NONE</code>.		 * 		 * @see		ch.capi.utils.DomainUtils DomainUtils		 */		public function get defaultSecDomainPolicy():String { return _defaultSecDomainPolicy; }		public function set defaultSecDomainPolicy(value:String):void { _defaultSecDomainPolicy = value; }				//-----------//		//Constructor//		//-----------//				/**		 * Creates a new <code>DefaultContextPolicy</code> object.		 * 		 * @param	defaultAppDomainPolicy			Defines how the <code>ApplicationDomain</code> must be created.		 * @apram	defaultSecDomainPolicy			Defines the <code>SecurityDomain</code> policy.		 */		public function DefaultContextPolicy(defaultAppDomainPolicy:String="current", defaultSecDomainPolicy:String="none"):void		{			_defaultAppDomainPolicy = defaultAppDomainPolicy;			_defaultSecDomainPolicy = defaultSecDomainPolicy;			}		//--------------//		//Public methods//		//--------------//		/**		 * Retrieves a <code>LoaderContext</code> that will be attached		 * to the specified <code>ILoadableFile</code>.		 * 		 * @param	file				The <code>ILoadableFile</code>.		 * @param	appDomainPolicy		The policy to retrieve the <code>ApplicationDomain</code>. If <code>null</code>,		 * 								then, the <code>defaultAppDomainPolicy</code> will be used.		 * @param	secDomainPolicy		The policy to retrieve the <code>SecurityDomain</code>. If <code>null</code>, then		 * 								the <code>defaultSecDomainPolicy</code> will be used.		 * @return	The created <code>LoaderContext</code>.		 * @see		ch.capi.utils.DomainUtils	DomainUtils		 */		public function getLoaderContext(file:ILoadableFile, appDomainPolicy:String=null, secDomainPolicy:String=null):LoaderContext		{			var appPolicy:String = (appDomainPolicy==null) ? defaultAppDomainPolicy : appDomainPolicy;			var secPolicy:String = (secDomainPolicy==null) ? defaultSecDomainPolicy : secDomainPolicy;						return new LoaderContext(checkPolicyFile, 									 DomainUtils.getApplicationDomain(appPolicy), 									 DomainUtils.getSecurityDomain(secPolicy));		}		 /**		 * Retrieves a <code>SoundLoaderContext</code> that will be attached		 * to the specified <code>ILoadableFile</code>.		 * 		 * @param	file		The <code>ILoadableFile</code>.		 * @return	The created <code>SoundLoaderContext</code>.		 */		public function getSoundContext(file:ILoadableFile):SoundLoaderContext		{			return new SoundLoaderContext(bufferTime, checkPolicyFile);		}		//-----------------//		//Protected methods//		//-----------------//				//---------------//		//Private methods//		//---------------//	}}