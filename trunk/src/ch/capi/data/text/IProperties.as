package ch.capi.data.text{	import ch.capi.data.IMap;	
	
	/**	 * An IProperties object can store and parse some key/value pairs.	 * 	 * @author		Cedric Tabin - thecaptain	 * @version		1.0	 */	public interface IProperties	{		/**		 * Defines the variables contained into the <code>Properties</code>.		 */		function get variables():IMap;		
		/**		 * Maps the specified key with the value. If the key is already set, the value will be erased by		 * the new one.		 * 		 * @param	key		The key.		 * @param	value	The value.		 * @return	The old value or <code>null</code> if the value was not defined.		 */		function setValue(key:String, value:*):*;		/**		 * Retrieves the value of the specified key. If the key doesn't exist, then <code>null</code>		 * is returned.		 * 		 * @param	key		The key.		 * @return	The value or <code>null</code>.		 */		function getValue(key:String):*;			/**		 * Removes the specified key.		 * 		 * @param	key		The key to remove.		 * @return	The value of the key or <code>null</code> if the key was not defined.		 */		function remove(key:String):*;		/**		 * Retrieves the value with no variables into it. That means that the value is retrieved as a <code>String</code>		 * and then the source <code>IMap</code> is used to replace all the variables into it.		 * 		 * @param	key		The key.		 * @return	The value with no variable into it.		 * @throws	Error	If the value is not a <code>String</code>.		 * @see		ch.capi.utils.VariableReplacer#replace()	VariableReplacer.replace()		 */		function getUpdatedValue(key:String):String;		/**		 * Retrieves the value of the specified key as integer.		 * 		 * @param	key		The key.		 * @return	The value as integer.		 * @throws	Error	If the value is not an integer.		 * @see		ch.capi.utils.ParseUtils#parseInteger()	ParseUtils.parseInteger()		 */		function getValueAsInt(key:String):int;				/**		 * Retrieves the value of the specified key as float.		 * 		 * @param	key		The key.		 * @return	The value as Number.		 * @throws	Error	If the value is not an Number.		 * @see		ch.capi.utils.ParseUtils#parseFloat()	ParseUtils.parseFloat()		 */		function getValueAsFloat(key:String):Number;		/**		 * Retrieves the value of the specified key as Number.		 * 		 * @param	key		The key.		 * @return	The value as Number.		 * @throws	Error	If the value is not an Number.		 * @see		ch.capi.utils.ParseUtils#parseNumber()	ParseUtils.parseNumber()		 */		function getValueAsNumber(key:String):Number;				/**		 * Retrieves the value of the specified key as unsigned integer.		 * 		 * @param	key		The key.		 * @return	The value as unsigned integer.		 * @throws	Error	If the value is not an unsigned integer.		 * @see		ch.capi.utils.ParseUtils#parseUnsigned()	ParseUtils.parseUnsigned()		 */		function getValueAsUnsigned(key:String):uint;				/**		 * Retrieves the value of the specified key as Boolean.		 * 		 * @param	key		The key.		 * @return	The value as Boolean.		 * @throws	Error	If the value is not a Boolean.		 * @see		ch.capi.utils.ParseUtils#parseBoolean()	ParseUtils.parseBoolean()		 */		function getValueAsBoolean(key:String):Boolean;				/**		 * Retrieves the value of the specified key as color (unsigned int).		 * 		 * @param	key		The key.		 * @return	The value as color.		 * @throws	Error	If the value is not a color value.		 * @see		ch.capi.utils.ParseUtils#parseColor()	ParseUtils.parseColor()		 */		function getValueAsColor(key:String):uint;		/**		 * Parses the specified source. The source must be a list of variables formatted like that <code>key=value</code>		 * on each line. The old key/value pairs are kept.		 * 		 * @param	src				The source to parse.		 * @param	replaceChars	Tells the parser to replace the special chars (\n, \t, ...).		 */		function parseData(src:String, replaceChars:Boolean=true):void;				/**		 * Deletes all the key/value pairs of the <code>IMap</code>.		 * 		 * @see		ch.capi.data.IMap#clear()	IMap.clear()		 */		function clear():void;	}}