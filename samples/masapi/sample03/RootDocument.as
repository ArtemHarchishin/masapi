package masapi.sample03{	import ch.capi.net.ILoadInfo;	import ch.capi.net.ILoadableFile;		import ch.capi.net.CompositeMassLoader;		import ch.capi.events.MassLoadEvent;			import masapi.Constants;			import flash.events.ProgressEvent;		import flash.events.Event;		import flash.display.Sprite;			//SWF configuration	[SWF(width="500", height="500", frameRate="30", backgroundColor="#FFFFFF")]		/**	 * 	 * 	 * @author		Cedric Tabin - thecaptain	 * @version		1.0	 */	public class RootDocument extends Sprite	{		//---------//		//Constants//		//---------//				//---------//		//Variables//		//---------//		private var _compositeMassLoader:CompositeMassLoader = new CompositeMassLoader();		//-----------------//		//Getters & Setters//		//-----------------//				//-----------//		//Constructor//		//-----------//				/**		 * Creates a new <code>RootDocument</code> object.		 */		public function RootDocument():void		{			//initializes the listeners			_compositeMassLoader.addEventListener(Event.OPEN, onOpen);			_compositeMassLoader.addEventListener(ProgressEvent.PROGRESS, onProgress);			_compositeMassLoader.addEventListener(Event.COMPLETE, onComplete);			_compositeMassLoader.addEventListener(MassLoadEvent.FILE_OPEN, onFileOpen);			_compositeMassLoader.addEventListener(MassLoadEvent.FILE_CLOSE, onFileClose);			_compositeMassLoader.addEventListener(MassLoadEvent.FILE_PROGRESS, onFileProgress);						//initializes the loading			init();		}				//--------------//		//Public methods//		//--------------//		//-----------------//		//Protected methods//		//-----------------//				protected function onOpen(evt:Event):void		{			trace("Massive Loading open");			}				protected function onComplete(evt:Event):void		{			trace("Massive Loading complete");		}				protected function onProgress(evt:ProgressEvent):void		{			/*			 * The MassLoader always maintains a list of data concerning the current			 * loading process. All data is contained info the ILoadInfo object that			 * can always be retrieved.			 */ 			var loadingInfo:ILoadInfo = _compositeMassLoader.massLoader.loadInfo;						trace("Massive Loading progress ("+loadingInfo.percentLoaded+"%)");		}				protected function onFileOpen(evt:MassLoadEvent):void		{			/*			 * A MassLoadEvent contains some useful information about the current			 * file sending the event and its data. The queue index is the position			 * of the file when its loading starts and the static index is its position			 * when it was added into the loading queue (using the addFile method).			 */			var file:ILoadableFile = evt.getFile();						trace("File open : "+file.urlRequest.url+" (queue index : "+evt.queueIndex+", static index : "+evt.staticIndex+")");		}		protected function onFileProgress(evt:MassLoadEvent):void		{			var file:ILoadableFile = evt.getFile();			trace("File progress : "+file.urlRequest.url+" (real url : "+file.fixedRequest.url+")");		}		protected function onFileClose(evt:MassLoadEvent):void		{			var file:ILoadableFile = evt.getFile();			trace("File closed : "+file.urlRequest.url+" (queue index : "+evt.queueIndex+", static index : "+evt.staticIndex+")");		}		//---------------//		//Private methods//		//---------------//		private function init():void		{			//creates the variables			Constants.putConstants(_compositeMassLoader.loadableFileFactory.defaultVariables);						//put the files into the loading queue			_compositeMassLoader.addFile("${XML}/anim.xml");			_compositeMassLoader.addFile("${PICTURES}/flash.jpg");			_compositeMassLoader.addFile("${TXT}/variables.txt");						//starts the loading			_compositeMassLoader.start();		}	}}