package masapi.sample01 {	import flash.text.TextFormat;	
	import flash.text.TextFieldAutoSize;		import flash.net.URLVariables;		import flash.text.TextField;		import flash.display.Loader;		import flash.events.Event;		import flash.display.Sprite;			import ch.capi.net.CompositeMassLoader;	import ch.capi.net.ILoadableFile;	import ch.capi.net.DataType;		//SWF configuration	[SWF(width="500", height="500", frameRate="30", backgroundColor="#FFFFFF")]	
	/**	 * This is a simple demo of the usage of the <code>CompositeMassLoader</code>	 * class.	 * 	 * @author		Cedric Tabin - thecaptain	 * @version		1.0	 */	public class RootDocument extends Sprite 	{		//---------//		//Constants//		//---------//				//---------//		//Variables//		//---------//				/*		 * When a CompositeMassLoader is used into a class, it is important to		 * keep a reference on it, for example with an instance variable. Otherwise		 * the Garbage Collector will kill the instance an no more event will be 		 * dispatched...		 */		private var _compositeMassLoader:CompositeMassLoader = new CompositeMassLoader();		/*		 * Those two variables are used for the data retrieval once the massive loading		 * is complete (see the init() method).		 */		private var _pictureFile:ILoadableFile;		private var _xmlFile:ILoadableFile;		//-----------------//		//Getters & Setters//		//-----------------//				//-----------//		//Constructor//		//-----------//				/**		 * Creates a new <code>SimpleMassLoader</code> object.		 */		public function RootDocument():void		{			//listening to the complete event			_compositeMassLoader.addEventListener(Event.COMPLETE, onMassLoadComplete);						//put the files into the loading queue and start the loading			init();		}				//--------------//		//Public methods//		//--------------//		//-----------------//		//Protected methods//		//-----------------//				protected function onMassLoadComplete(evt:Event):void		{			/*			 * When the code here is executed, that means that all the files have been			 * loaded (maybe not successfully). So, if there was no error, the we can			 * simply handle our data !			 */				 			 //retrieves the data			 var picture:Loader = _pictureFile.getData(DataType.LOADER);			 var variables:URLVariables = _xmlFile.getData(DataType.URL_VARIABLES);			 			 //extract the variables			 var title:String = variables.title;			 var text:String = variables.text;			 			 //put the text on the stage			 var titleField:TextField = createSimpleField();			 titleField.text = title;			 addChild(titleField);			 			 var textField:TextField = createSimpleField();			 textField.text = text;			 textField.y = titleField.height+5;			 addChild(textField);			 			 //and finally put the picture on the stage			 picture.y = textField.y + textField.height + 5;			 addChild(picture);		}				protected function createSimpleField():TextField		{			//create a new TextField			var field:TextField = new TextField();			field.width = 200;			field.height = 20;			field.multiline = true;			field.autoSize = TextFieldAutoSize.LEFT;						//a simple TextFormat			var format:TextFormat = new TextFormat();			format.color = 0;			format.font = "Arial";			field.defaultTextFormat = format;						return field;		}		//---------------//		//Private methods//		//---------------//		private function init():void		{			/*			 * This property will limit the number of files to load at the same time.			 * By default, this value is 0, that means that the MassLoader will launch 			 * the loading of all the files together. By setting it to one, only one file			 * will be loading. That's a sequential massive loading. 			 */			_compositeMassLoader.massLoader.parallelFiles = 1;						//put the files into the loading queue			_pictureFile = _compositeMassLoader.addFile("../resources/pictures/flash.jpg");			_xmlFile = _compositeMassLoader.addFile("../resources/txt/variables.txt");						//starts the loading			_compositeMassLoader.start();		}	}}